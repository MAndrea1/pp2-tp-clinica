drop database if exists clinicaSePrice;
create database clinicaSePrice;
use clinicaSePrice;

create table roles(
RolUsu int,
NomRol varchar(30),
constraint primary key(RolUsu)
);

insert into roles values
(120,'Administrador'),
(121,'Medico');

create table usuario(
CodUsu int auto_increment,
NombreUsu varchar (20),
PassUsu varchar (15),
RolUsu int,
constraint pk_usuario primary key (CodUsu),
constraint fk_usuario foreign key(RolUsu) references roles(RolUsu)
);

insert into usuario(CodUsu,NombreUsu,PassUsu,RolUsu) values
(1,'Admin','123',120),
(2, 'Med1','123',121),
(3, 'Med2','123',121),
(4, 'Med3','123',121),
(5, 'Med4','123',121),
(6, 'Med5','123',121);

create table especialidades(
CodEsp int,
NomEsp varchar(30),
Intervalo int,
constraint primary key(CodEsp)
);

insert into especialidades values
(1,'Cardiologia', 15),
(2,'Pediatria', 15),
(3,'fisio kinesiologia', 25),
(4,'salud mental', 30);

CREATE TABLE medicos (
    CodUsu int,
    Nombre varchar(30),
    Apellido varchar(30),
    CodEsp int,
    constraint pk_medicos primary key (CodUsu),
    constraint fk_medicos_usuario foreign key (CodUsu) references usuario(CodUsu),
    constraint fk_medicos_especialidad foreign key (CodEsp) references especialidades(CodEsp)
);

INSERT INTO medicos (CodUsu, Nombre, Apellido, CodEsp) VALUES
(2, 'Maria', 'Fernandez', 1),
(3, 'Laura', 'Gomez', 2),
(4, 'Ramona', 'Gamez', 3),
(5, 'Pamela', 'Rios', 4),
(6, 'Josefina', 'Rios', 1);

create table pacientes(
    Nombre varchar(30),
    Apellido varchar(30),
    Dni int,
    Genero varchar(30),
    Nacionalidad varchar(30),
    Prepaga boolean,
    constraint pk_pacientes primary key (Dni)
);

INSERT INTO pacientes (Nombre, Apellido, Dni, Genero, Nacionalidad, Prepaga) VALUES
('Mario', 'Rodriguez', 25974152, 'Masculino', 'Argentina', true),
('Agustin', 'Alvarez', 12, 'Masculino', 'Argentina', true),
('Esteban', 'Garcia', 42584952, 'Masculino', 'Argentina', false);

CREATE TABLE turnos (
    CodTurno int AUTO_INCREMENT,
    Dni int,
    CodUsu int,
    FechaTurno date,
    Acreditacion boolean,
    HorarioTurno time,
    constraint pk_turnos primary key (CodTurno),
    constraint fk_turnos_pacientes foreign key (Dni) references pacientes(Dni),
    constraint fk_turnos_medicos foreign key (CodUsu) references medicos(CodUsu)
);

INSERT INTO turnos (CodTurno, Dni, CodUsu, FechaTurno, Acreditacion, HorarioTurno) VALUES
(1, 25974152, 2, '2024-10-25', true, '09:00:00'),
(2, 42584952, 2, '2024-10-25', true, '14:30:00'),
(3, 25974152, 3, '2024-11-01', false, '10:00:00'),
(12, 12, 2, '2024-11-01', false, '10:00:00');

CREATE TABLE historias (
    CodTurno int,
    Detalles varchar(500),
    CONSTRAINT pk_historias PRIMARY KEY (CodTurno),
    CONSTRAINT fk_historias_turno FOREIGN KEY (CodTurno) REFERENCES turnos(CodTurno)
);

INSERT INTO historias (CodTurno, Detalles) VALUES
(1, ''),
(2, ''),
(3, 'Diagnostico: sedentarismo'),
(12, 'Diagnostico: sedentarismo');

delimiter //
drop procedure if exists IngresoLogin//
CREATE PROCEDURE `IngresoLogin`(in Usu varchar(20), in Pass varchar(15), in RolUsu int)
BEGIN
	select CodUsu
    from usuario u
    where u.NombreUsu = Usu and u.PassUsu = Pass and RolUsu = u.RolUsu;
END;
//

DELIMITER //
DROP PROCEDURE IF EXISTS InsertarPaciente //
CREATE PROCEDURE InsertarPaciente(
    IN p_Nombre VARCHAR(30),
    IN p_Apellido VARCHAR(30),
    IN p_Dni INT,
    IN p_Genero VARCHAR(30),
    IN p_Nacionalidad VARCHAR(30),
    IN p_Prepaga BOOLEAN
)
BEGIN
    INSERT INTO pacientes (Nombre, Apellido, Dni, Genero, Nacionalidad, Prepaga)
    VALUES (p_Nombre, p_Apellido, p_Dni, p_Genero, p_Nacionalidad, p_Prepaga);
END;
//

DELIMITER //
DROP PROCEDURE IF EXISTS BuscarPaciente // 
CREATE PROCEDURE BuscarPaciente(in Doc int)
BEGIN
select Nombre, Apellido, Dni, Genero, Nacionalidad, Prepaga
from pacientes p 
where p.Dni = Doc;
END
//

DELIMITER //
DROP PROCEDURE IF EXISTS BuscarTodosLosMedicos //
CREATE PROCEDURE BuscarTodosLosMedicos()
BEGIN
    SELECT 
        m.CodUsu, 
        m.Nombre, 
        m.Apellido, 
        e.CodEsp, 
        e.NomEsp, 
        e.Intervalo
    FROM 
        medicos m
    INNER JOIN 
        especialidades e ON m.CodEsp = e.CodEsp;
END;
//

DELIMITER //
DROP PROCEDURE IF EXISTS BuscarMedicoPorId //
CREATE PROCEDURE BuscarMedicoPorId(IN p_CodUsu INT)
BEGIN
    SELECT 
        m.CodUsu, 
        m.Nombre, 
        m.Apellido, 
        e.CodEsp, 
        e.NomEsp, 
        e.Intervalo
    FROM 
        medicos m
    INNER JOIN 
        especialidades e ON m.CodEsp = e.CodEsp
    WHERE 
        m.CodUsu = p_CodUsu;
END;
//

DELIMITER //
DROP PROCEDURE IF EXISTS BuscarTodosLosMedicosPorEspecialidad //
CREATE PROCEDURE BuscarTodosLosMedicosPorEspecialidad(IN inputCodEsp INT)
BEGIN
    SELECT 
        m.CodUsu, 
        m.Nombre, 
        m.Apellido, 
        e.CodEsp, 
        e.NomEsp, 
        e.Intervalo
    FROM 
        medicos m
    INNER JOIN 
        especialidades e ON m.CodEsp = e.CodEsp
    WHERE 
        e.CodEsp = inputCodEsp;
END;
//

DELIMITER //
DROP PROCEDURE IF EXISTS BuscarTodasLasEspecialidades //
CREATE PROCEDURE BuscarTodasLasEspecialidades()
BEGIN
    SELECT 
        CodEsp, 
        NomEsp, 
        Intervalo
    FROM 
        especialidades;
END;
//


DELIMITER //
DROP PROCEDURE IF EXISTS InsertarTurno //
CREATE PROCEDURE InsertarTurno(
    IN p_Dni INT,
    IN p_CodUsu INT,
    IN p_FechaTurno DATE,
    IN p_Acreditacion BOOLEAN,
    IN p_HorarioTurno TIME
)
BEGIN
    DECLARE newCodTurno INT;

    INSERT INTO turnos (Dni, CodUsu, FechaTurno, Acreditacion, HorarioTurno)
    VALUES (p_Dni, p_CodUsu, p_FechaTurno, p_Acreditacion, p_HorarioTurno);
    
    SET newCodTurno = LAST_INSERT_ID();

    INSERT INTO historias (CodTurno, Detalles)
    VALUES (newCodTurno, '');
END;
//

DELIMITER //
DROP PROCEDURE IF EXISTS EliminarTurno //
CREATE PROCEDURE EliminarTurno(
    IN p_CodTurno INT
)
BEGIN
    -- Delete the related Historia first
    DELETE FROM historias WHERE CodTurno = p_CodTurno;

    -- Now delete the Turno
    DELETE FROM turnos WHERE CodTurno = p_CodTurno;
END;
//

DELIMITER //
DROP PROCEDURE IF EXISTS BuscarTurnoPorId //
CREATE PROCEDURE BuscarTurnoPorId(
    IN p_CodTurno INT
)
BEGIN
    SELECT CodUsu, Dni, FechaTurno, Acreditacion, HorarioTurno
    FROM turnos
    WHERE CodTurno = p_CodTurno;
END;
//


DELIMITER //
DROP PROCEDURE IF EXISTS BuscarTurnosPorMedico //
CREATE PROCEDURE BuscarTurnosPorMedico(
    IN p_CodUsu INT
)
BEGIN
    SELECT CodTurno, Dni, FechaTurno, Acreditacion, HorarioTurno
    FROM turnos
    WHERE CodUsu = p_CodUsu;
END;
//

DELIMITER //
DROP PROCEDURE IF EXISTS BuscarTurnosPorMedicoYFecha //
CREATE PROCEDURE BuscarTurnosPorMedicoYFecha(
    IN p_CodUsu INT,
    IN p_FechaTurno DATE
)
BEGIN
    SELECT CodTurno, Dni, FechaTurno, Acreditacion, HorarioTurno
    FROM turnos
    WHERE CodUsu = p_CodUsu AND FechaTurno = p_FechaTurno;
END;
//

DELIMITER //
DROP PROCEDURE IF EXISTS BuscarTurnosPorMedicoYMes //
CREATE PROCEDURE BuscarTurnosPorMedicoYMes(
    IN p_CodUsu INT,
    IN p_Anio INT,
    IN p_Mes INT
)
BEGIN
    SELECT CodTurno, Dni, CodUsu, FechaTurno, Acreditacion, HorarioTurno
    FROM turnos
    WHERE CodUsu = p_CodUsu
      AND YEAR(FechaTurno) = p_Anio
      AND MONTH(FechaTurno) = p_Mes;
END;
//


DELIMITER //
CREATE PROCEDURE BuscarTurnosPorPaciente(IN p_Dni INT)
BEGIN
    SELECT CodTurno, FechaTurno, HorarioTurno, Acreditacion
    FROM turnos
    WHERE Dni = p_Dni;
END;
//

DELIMITER //
CREATE PROCEDURE AcreditarTurno(IN p_CodTurno INT)
BEGIN
    UPDATE turnos
    SET Acreditacion = TRUE
    WHERE CodTurno = p_CodTurno AND Acreditacion = FALSE;
END;
//

DELIMITER //
CREATE PROCEDURE GetHistoriasByDniAndCodUsu(

    IN patientDni INT,
    IN doctorCodUsu INT
)
BEGIN
    SELECT h.CodTurno, h.Detalles, t.CodUsu, t.Dni, t.FechaTurno, t.Acreditacion, t.HorarioTurno
    FROM historias h
    JOIN turnos t ON h.CodTurno = t.CodTurno
    WHERE t.Dni = patientDni AND t.CodUsu = doctorCodUsu;
END //


DELIMITER //
CREATE PROCEDURE UpdateHistoriaDetalles(
    IN turnoCod INT,
    IN newDetalles VARCHAR(500)
)
BEGIN
    UPDATE historias
    SET Detalles = newDetalles
    WHERE CodTurno = turnoCod;
END //

DELIMITER ;

